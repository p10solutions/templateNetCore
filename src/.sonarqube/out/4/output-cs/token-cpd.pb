Ž
^C:\Template\templateNetCore\src\Template.Core.Infra.Data\Extensions\EntityTypeConfiguration.cs
	namespace 	
Template
 
. 
Core 
. 
Infra 
. 
Data "
." #

Extensions# -
{ 
public 

abstract 
class #
EntityTypeConfiguration 1
<1 2
TEntity2 9
>9 :
where; @
TEntityA H
:I J
classK P
{ 
public 
abstract 
void 
Map  
(  !
EntityTypeBuilder! 2
<2 3
TEntity3 :
>: ;
builder< C
)C D
;D E
} 
}		 †	
]C:\Template\templateNetCore\src\Template.Core.Infra.Data\Extensions\ModelBuilderExtensions.cs
	namespace 	
Template
 
. 
Core 
. 
Infra 
. 
Data "
." #

Extensions# -
{ 
public 

static 
class "
ModelBuilderExtensions .
{ 
public 
static 
void 
AddConfiguration +
<+ ,
TEntity, 3
>3 4
(4 5
this5 9
ModelBuilder: F
modelBuilderG S
,S T#
EntityTypeConfigurationU l
<l m
TEntitym t
>t u
configuration	v ƒ
)
ƒ „
where
… Š
TEntity
‹ ’
:
“ ”
class
• š
{ 	
configuration		 
.		 
Map		 
(		 
modelBuilder		 *
.		* +
Entity		+ 1
<		1 2
TEntity		2 9
>		9 :
(		: ;
)		; <
)		< =
;		= >
}

 	
} 
} µ
LC:\Template\templateNetCore\src\Template.Core.Infra.Data\Mapping\TesteMap.cs
	namespace 	
Template
 
. 
Core 
. 
Infra 
. 
Data "
." #
Mapping# *
{		 
class

 	
TesteMap


 
:

 #
EntityTypeConfiguration

 ,
<

, -
Teste

- 2
>

2 3
{ 
public 
override 
void 
Map  
(  !
EntityTypeBuilder! 2
<2 3
Teste3 8
>8 9
builder: A
)A B
{ 	
} 	
} 
} ì
XC:\Template\templateNetCore\src\Template.Core.Infra.Data\Repositories\Base\Repository.cs
	namespace 	
Template
 
. 
Cadastro 
. 
Infra !
.! "
Data" &
.& '
Repositories' 3
.3 4
Base4 8
{ 
public 

class 

Repository 
< 
T 
> 
:  
IRepository! ,
<, -
T- .
>. /
where0 5
T6 7
:7 8
Entidade9 A
<A B
TB C
>C D
{		 
	protected

 
	DbContext

 
_db

 
;

  
DbSet 
< 
T 
> 
_dbEntidade 
; 
public 

Repository 
( 
	DbContext #
db$ &
)& '
{ 	
_db 
= 
db 
; 
_dbEntidade 
= 
_db 
. 
Set !
<! "
T" #
># $
($ %
)% &
;& '
} 	
public 
void 
	Adicionar 
( 
T 
entidade  (
)( )
{ 	
_dbEntidade 
. 
Add 
( 
entidade $
)$ %
;% &
} 	
public 
void 
	Atualizar 
( 
T 
entidade  (
)( )
{ 	
_dbEntidade 
. 
Update 
( 
entidade '
)' (
;( )
} 	
public 
T 
Buscar 
( 
int 
id 
) 
{ 	
return   
_dbEntidade   
.   
Find   #
(  # $
id  $ &
)  & '
;  ' (
}!! 	
public## 
bool## 
Existe## 
(## 
int## 
id## !
)##! "
{$$ 	
return%% 
_dbEntidade%% 
.%% 
Any%% "
(%%" #
x%%# $
=>%%% '
x%%( )
.%%) *
Id%%* ,
==%%- /
id%%0 2
)%%2 3
;%%3 4
}&& 	
public(( 

IQueryable(( 
<(( 
T(( 
>(( 
Listar(( #
(((# $
)(($ %
{)) 	
return** 
_dbEntidade** 
.** 
AsQueryable** *
(*** +
)**+ ,
;**, -
}++ 	
public-- 
void-- 
Remover-- 
(-- 
T-- 
entidade-- &
)--& '
{.. 	
_dbEntidade// 
.// 
Remove// 
(// 
entidade// '
)//' (
;//( )
}00 	
public22 
void22 
Remover22 
(22 
int22 
id22  "
)22" #
{33 	
var44 
entidade44 
=44 
Buscar44 !
(44! "
id44" $
)44$ %
;44% &
Remover66 
(66 
entidade66 
)66 
;66 
}77 	
}88 
}99 